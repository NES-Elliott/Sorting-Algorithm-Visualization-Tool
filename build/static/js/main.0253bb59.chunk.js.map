{"version":3,"sources":["utils/functions.js","utils/mergeAnimation.js","components/SortingVisualizer.js","utils/mergeSort.js","App.js","index.js"],"names":["resetArray","intArrayBars","min","max","array","i","push","Math","floor","random","mergeSortAnimation","animation","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","j","doMerge","SortingVisualizer","useState","setArray","window","innerWidth","useEffect","className","map","value","idx","key","style","height","onClick","animationSpeed","primaryColor","secondaryColor","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","backgroundColor","newHeight","mergeSort","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0253bb59.chunk.js","sourcesContent":["// This function takes 3 values,\n// intArrayBars determines how many integers are pushed to the array\n// min determines the lower end of the range of integers\n// max determines the upper end of the range of integers\nexport function resetArray(intArrayBars, min, max) {\n  const array = []\n  for (let i = 0; i < intArrayBars; i++) {\n    array.push(Math.floor(Math.random() * (max - min + 1) + min))\n  }\n  return array\n}\n","// This function takes 1 value\n// array is the array of integers we are sorting.\nexport function mergeSortAnimation(array) {\n  const animation = []\n  if (array.length <= 1) return array\n  const auxiliaryArray = array.slice()\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animation)\n  return animation\n}\n\n// This function takes 5 valus\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animation) {\n  if (startIdx === endIdx) return\n  const middleIdx = Math.floor((startIdx + endIdx) / 2)\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animation)\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animation)\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animation)\n}\n\n// This function takes 6 values\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animation) {\n  let k = startIdx\n  let i = startIdx\n  let j = middleIdx + 1\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing we push them once\n    // to change their color.\n    animation.push([i, j])\n    // These are the values that we're comparing we push them a second\n    // time to revert their color.\n    animation.push([i, j])\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animation.push([k, auxiliaryArray[i]])\n      mainArray[k++] = auxiliaryArray[i++]\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animation.push([k, auxiliaryArray[j]])\n      mainArray[k++] = auxiliaryArray[j++]\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing we push them once\n    // to change their color.\n    animation.push([i, i])\n    // These are the values that we're comparing we push them a second\n    // time to revert their color.\n    animation.push([i, i])\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animation.push([k, auxiliaryArray[i]])\n    mainArray[k++] = auxiliaryArray[i++]\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing we push them once\n    // to change their color.\n    animation.push([j, j])\n    // These are the values that we're comparing we push them a second\n    // time to revert their color.\n    animation.push([j, j])\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animation.push([k, auxiliaryArray[j]])\n    mainArray[k++] = auxiliaryArray[j++]\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport { resetArray } from '../utils/functions'\nimport { mergeSort } from '../utils/mergeSort'\nimport { mergeSortAnimation } from '../utils/mergeAnimation'\n\n\nexport const SortingVisualizer = () => {\n  const [array, setArray] = useState([])\n\n  const intArrayBars = ((window.innerWidth / 4) * 0.7)\n  const arrayMax = 90\n  const arrayMin = 1\n  const animationSpeed = 2\n  const primaryColor = 'pink'\n  const secondaryColor = 'orange'\n\n  useEffect(() => {\n    setArray(resetArray(intArrayBars, arrayMin, arrayMax))\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <div className=\"array__container\">\n        {array.map((value, idx) => (\n            <div\n              className=\"array__bar\"\n              key={idx}\n              style={{height: `${value}vh`}}></div>\n          ))}\n      </div>\n      <div className=\"btn__container\">\n        <button className=\"btn\" onClick={() => setArray(resetArray(intArrayBars, arrayMin, arrayMax))}>Generate New Array</button>\n        <button className=\"btn\" onClick={() => mergeSort(mergeSortAnimation(array), animationSpeed, primaryColor, secondaryColor)}>Merge Sort</button>\n      </div>\n    </div>\n  )\n}\n","// This function takes 4 values,\n// animation determines the animation used while the function sorts\n// animationSpeed determines the speed at which the function sorts (ms).\n// primaryColor determines the color of dormant array bars\n// secondaryColor determines the color of active array bars\nexport function mergeSort(animation, animationSpeed, primaryColor, secondaryColor) {\n  for (let i = 0; i < animation.length; i++) {\n    const arrayBars = document.getElementsByClassName('array__bar')\n    const isColorChange = i % 3 !== 2\n\n    if (isColorChange) {\n      const [barOneIdx, barTwoIdx] = animation[i]\n      const barOneStyle = arrayBars[barOneIdx].style\n      const barTwoStyle = arrayBars[barTwoIdx].style\n      const color = i % 3 === 0 ? secondaryColor : primaryColor\n\n      setTimeout(() => {\n        barOneStyle.backgroundColor = color\n        barTwoStyle.backgroundColor = color\n      }, i * animationSpeed)\n    } else {\n      setTimeout(() => {\n        const [barOneIdx, newHeight] = animation[i]\n        const barOneStyle = arrayBars[barOneIdx].style\n        barOneStyle.height = `${newHeight}vh`\n      }, i * animationSpeed)\n    }\n  }\n}\n","import React from 'react';\nimport { SortingVisualizer } from './components/SortingVisualizer'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}